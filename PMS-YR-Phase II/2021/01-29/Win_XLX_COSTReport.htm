<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <title>费用</title>
    <!--非美工引用-->
    <script src="/Scripts/plugins/echarts/echarts.min.js" type="text/javascript"></script>
    <script src="/Scripts/boot.js?v=$AppVersion" type="text/javascript"></script>
    <script src="/Form/Init/$Model.data.FormId/$Model.data.FormState/$Model.data.KeyValue"></script>
    <script src="/Scripts/PlatForm/ComTools.js?v=$AppVersion" type="text/javascript"></script>
    <link href="/css/default.css" rel="stylesheet">
    <link href="/css/Expenses.css" rel="stylesheet">
	
    <script src="/Scripts/PlatForm/ComTools.js?v=$AppVersion" type="text/javascript"></script>
    <script src="/Scripts/PlatForm/SingleForm.js?v=$AppVersion" type="text/javascript"></script>
    <script src="/PowerPlat/WorkFlow/js/FlowStatusSeries.js?v=$AppVersion" type="text/javascript"></script>
    <script src="/Scripts/PlatForm/WorkFlowForm.js?v=$AppVersion" type="text/javascript"></script>
    <script src="/Form/Init/$Model.data.FormId/$Model.data.FormState/$Model.data.KeyValue"></script>
    <script src="/Resource/Get/$!CurrentSession.Language?v=$AppVersion" type="text/javascript"></script>
	    <script src="/Scripts/plugins/echarts/echarts.js"></script>
</head>

<body style="background: #eff5f9;">
    <div class="box-list">
        <ul class="box-ul">
            <li>
                <div class="pro" id="div1">
                    <h1 class="pro-title" style="background: #76b5f5;margin-top:0px;margin-bottom:0px;">项目概算（万元）</h1>
                    <div id="ProGSum" class="pro-body" style="font-size: 24px;color: #76b5f5;">0</div>
                    <ul class="pro-foot">
                        <li>设备购置费<span id="ProG_SB">0</span></li>
                        <li>主要材料费<span id="ProG_CL">0</span></li>
                        <li>安装工程费<span id="ProG_AZ">0</span></li>
                        <li>建设工程费<span id="ProG_JS">0</span></li>
                        <li>其他费用<span id="ProG_QT">0</span></li>
                    </ul>
                </div>
            </li>
            <li>
                <div class="pro" id="div3">
                    <h1 class="pro-title" style="background: #feb43b;margin-top:0px;margin-bottom:0px;">累计合同金额（万元）</h1>
                    <div id="ContSum" class="pro-body" style="font-size: 24px;color: #feb43b;">0</div>
                    <ul class="pro-foot">
                        <li>本年度金额<span id="Cont_Year">0</span></li>
                        <li>本月度金额<span id="Cont_Month">0</span></li>
                        <li>占概算比%<span id="Cont_GSB">0</span></li>
                    </ul>
                </div>
            </li>
            <li>
                <div class="pro" id="div4">
                    <h1 class="pro-title" style="background: #69dcbb;margin-top:0px;margin-bottom:0px;">累计支付金额（万元）</h1>
                    <div id="PaySum" class="pro-body" style="font-size: 24px;color: #69dcbb;">0</div>
                    <ul class="pro-foot">
                        <li>本年度支付<span id="Pay_Year">0</span></li>
                        <li>本月度支付<span id="Pay_Month">0</span></li>
                        <li>占合同比%<span id="Pay_HTB">0</span></li>
                        <li>占概算比%<span id="Pay_MBB">0</span></li>
                    </ul>
                </div>
            </li>

            <li style="flex: 3;">
                <div class="box-li-con" style="width:100%;height:10%;margin-top:0px;margin-bottom:0px;">
                    <h1 class="common-h" style="margin-top:0px;margin-bottom:0px;">合同执行情况</h1>
                </div>
                <div class="tc" style="width:100%;height:90%;">
                    <div id="chart5" style="width:100%;height:100%;">
                    </div>
                </div>
            </li>
        </ul>
    </div>
    <div style="width:100%;height:33%;">
        <table cellpadding="0" cellspacing="0" style="width:100%;height:100%;">
            <tbody>
                <tr style="width:100%;height:10%;">
                    <td width="33%" align="left" style="background:#fff;">
                        <h1 class="common-h" style="width:100%;height:100%;margin-top:0px;margin-bottom:0px;">总体投资情况
                        </h1>
                    </td>
                    <td width="33%" align="left" style="background:#fff;">
                        <h1 class="common-h" style="width:100%;height:100%;margin-top:0px;margin-bottom:0px;">本年度投资情况
                        </h1>
                    </td>
                    <td width="33%" align="left" style="background:#fff;">
                        <h1 class="common-h" style="width:100%;height:100%;margin-top:0px;margin-bottom:0px;">本月度投资情况
                        </h1>
                    </td>
                </tr>
                <tr style="width:100%;height:90%;">
                    <td width="33%" style="background:#fff;">
                        <div id="chart1" style="width:100%;height:100%;">
                        </div>
                    </td>
                    <td width="33%" style="background:#fff;">
                        <div id="chart2" style="width:100%;height:100%;">
                        </div>
                    </td>
                    <td width="33%" style="background:#fff;">
                        <div id="chart3" style="width:100%;height:100%;">
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div style="width:100%;height:33%;margin-bottom: 10px;">
        <table cellpadding="0" cellspacing="0" style="width:100%;height:100%;">
            <tbody>
                <tr style="width:100%;height:100%;">
                    <td width="33%" style="background:#fff;">
                        <div id="chart6" style="width:100%;height:100%;">
                        </div>
                    </td>
                    <td width="33%" style="background:#fff;">
                        <div id="chart7" style="width:100%;height:100%;">
                        </div>
                    </td>
                    <td width="33%" style="background:#fff;">
                        <div id="chart8" style="width:100%;height:100%;">
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div style="width:100%;height:45%;margin-bottom: 10px;">
        <table cellpadding="0" cellspacing="0" style="width:100%;height:100%;">
            <tbody>
                <tr style="width:100%;height:100%;">
                    <td width="70%" align="left" style="background:#fff;">
                        <table cellpadding="0" cellspacing="0" style="width:100%;height:100%;">
                            <tbody>
                                <tr style="width:100%;height:10%;">
                                    <td width="100%" align="left" style="background:#fff;">
                                        <h1 class="common-h"
                                            style="width:100%;height:100%;margin-top:0px;margin-bottom:0px;">
                                            赢得值曲线(万元)
                                        </h1>
                                    </td>
                                </tr>
                                <tr style="width:100%;height:90%;">
                                    <td width="100%" style="background:#fff;">
                                        <div id="charthere" style="width:100%;height:100%;">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </td>
                    <td width="30%" align="left" style="background:#fff;">
                        <table cellpadding="0" cellspacing="0" style="width:100%;height:100%;">
                            <tbody>
                                <tr style="width:100%;height:100%;">
                                    <td rowspan="2" width="100%" style="background:#fff;">
                                        <div id="chart9" style="width:100%;height:100%;">
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</body>

</html>
<script>
        mini.parse();
var currentplan="",  type = "week"
var    AccountingPeriod = null //结算周期

   
	      var GetAccountingPeriod = function () {
            var p = { KeyWord: "PS_PLN_AccountingPeriod", select: "", sort: "seq_num desc", "url": "/Form/GridPageLoadEx", async: false };
            p.swhere = "Actived ='1' ";
            FormFuns.GridPageLoad(p, function (o) {
                var data = mini.decode(o.data.value);
                if (data.length >= 1) {
                    AccountingPeriod = data[0];
                }
            });
        }

    //单柱立体阴影
    var MyCubeRect = echarts.graphic.extendShape({
        shape: {
            x: 0,
            y: 0,
            width: 48, //柱宽
            zWidth: 8, //阴影折角宽
            zHeight: 4, //阴影折角高
        },
        buildPath: function (ctx, shape) {
            const api = shape.api;
            const xAxisPoint = api.coord([shape.xValue, 0]);
            const p0 = [shape.x, shape.y];
            const p1 = [shape.x - shape.width / 2, shape.y];
            const p4 = [shape.x + shape.width / 2, shape.y];
            const p2 = [xAxisPoint[0] - shape.width / 2, xAxisPoint[1]];
            const p3 = [xAxisPoint[0] + shape.width / 2, xAxisPoint[1]];

            ctx.moveTo(p0[0], p0[1]); //0
            ctx.lineTo(p1[0], p1[1]); //1
            ctx.lineTo(p2[0], p2[1]); //2
            ctx.lineTo(p3[0], p3[1]); //3
            ctx.lineTo(p4[0], p4[1]); //4
            ctx.lineTo(p0[0], p0[1]); //0
            ctx.closePath();
        }
    });
    var MyCubeShadow = echarts.graphic.extendShape({
        shape: {
            x: 0,
            y: 0,
            width: 48,
            zWidth: 8,
            zHeight: 4,
        },
        buildPath: function (ctx, shape) {
            const api = shape.api;
            const xAxisPoint = api.coord([shape.xValue, 0]);
            const p0 = [shape.x, shape.y];
            const p1 = [shape.x - shape.width / 2, shape.y];
            const p4 = [shape.x + shape.width / 2, shape.y];
            const p6 = [shape.x + shape.width / 2 + shape.zWidth, shape.y - shape.zHeight];
            const p7 = [shape.x - shape.width / 2 + shape.zWidth, shape.y - shape.zHeight];
            const p3 = [xAxisPoint[0] + shape.width / 2, xAxisPoint[1]];
            const p5 = [xAxisPoint[0] + shape.width / 2 + shape.zWidth, xAxisPoint[1] - shape.zHeight];

            ctx.moveTo(p4[0], p4[1]); //4
            ctx.lineTo(p3[0], p3[1]); //3
            ctx.lineTo(p5[0], p5[1]); //5
            ctx.lineTo(p6[0], p6[1]); //6
            ctx.lineTo(p4[0], p4[1]); //4

            ctx.moveTo(p4[0], p4[1]); //4
            ctx.lineTo(p6[0], p6[1]); //6
            ctx.lineTo(p7[0], p7[1]); //7
            ctx.lineTo(p1[0], p1[1]); //1
            ctx.lineTo(p4[0], p4[1]); //4
            ctx.closePath();
        }
    });
    echarts.graphic.registerShape('MyCubeRect', MyCubeRect);
    echarts.graphic.registerShape('MyCubeShadow', MyCubeShadow);
    //双柱立体阴影
    var MyCubeRect2_1 = echarts.graphic.extendShape({
        shape: {
            x: 0,
            y: 0,
            width: 48, //柱宽
            zWidth: 8, //阴影折角宽
            zHeight: 4, //阴影折角高
        },
        buildPath: function (ctx, shape) {
            const api = shape.api;
            const xAxisPoint = api.coord([shape.xValue, 0]);
            const p0 = [shape.x, shape.y];
            const p1 = [shape.x - shape.width / 2 - 40, shape.y];
            const p4 = [shape.x + shape.width / 2 - 40, shape.y];
            const p2 = [xAxisPoint[0] - shape.width / 2 - 40, xAxisPoint[1]];
            const p3 = [xAxisPoint[0] + shape.width / 2 - 40, xAxisPoint[1]];

            ctx.moveTo(p0[0], p0[1]); //0
            ctx.lineTo(p1[0], p1[1]); //1
            ctx.lineTo(p2[0], p2[1]); //2
            ctx.lineTo(p3[0], p3[1]); //3
            ctx.lineTo(p4[0], p4[1]); //4
            ctx.lineTo(p0[0], p0[1]); //0
            ctx.closePath();
        }
    });
    var MyCubeShadow2_1 = echarts.graphic.extendShape({
        shape: {
            x: 0,
            y: 0,
            width: 48,
            zWidth: 8,
            zHeight: 4,
        },
        buildPath: function (ctx, shape) {
            const api = shape.api;
            const xAxisPoint = api.coord([shape.xValue, 0]);
            const p0 = [shape.x, shape.y];
            const p1 = [shape.x - shape.width / 2 - 40, shape.y];
            const p4 = [shape.x + shape.width / 2 - 40, shape.y];
            const p6 = [shape.x + shape.width / 2 + shape.zWidth - 40, shape.y - shape.zHeight];
            const p7 = [shape.x - shape.width / 2 + shape.zWidth - 40, shape.y - shape.zHeight];
            const p3 = [xAxisPoint[0] + shape.width / 2 - 40, xAxisPoint[1]];
            const p5 = [xAxisPoint[0] + shape.width / 2 + shape.zWidth - 40, xAxisPoint[1] - shape.zHeight];

            ctx.moveTo(p4[0], p4[1]); //4
            ctx.lineTo(p3[0], p3[1]); //3
            ctx.lineTo(p5[0], p5[1]); //5
            ctx.lineTo(p6[0], p6[1]); //6
            ctx.lineTo(p4[0], p4[1]); //4

            ctx.moveTo(p4[0], p4[1]); //4
            ctx.lineTo(p6[0], p6[1]); //6
            ctx.lineTo(p7[0], p7[1]); //7
            ctx.lineTo(p1[0], p1[1]); //1
            ctx.lineTo(p4[0], p4[1]); //4
            ctx.closePath();
        }
    });
    echarts.graphic.registerShape('MyCubeRect2_1', MyCubeRect2_1);
    echarts.graphic.registerShape('MyCubeShadow2_1', MyCubeShadow2_1);
    var MyCubeRect2_2 = echarts.graphic.extendShape({
        shape: {
            x: 0,
            y: 0,
            width: 48, //柱宽
            zWidth: 8, //阴影折角宽
            zHeight: 4, //阴影折角高
        },
        buildPath: function (ctx, shape) {
            const api = shape.api;
            const xAxisPoint = api.coord([shape.xValue, 0]);
            const p0 = [shape.x, shape.y];
            const p1 = [shape.x - shape.width / 2 + 30, shape.y];
            const p4 = [shape.x + shape.width / 2 + 30, shape.y];
            const p2 = [xAxisPoint[0] - shape.width / 2 + 30, xAxisPoint[1]];
            const p3 = [xAxisPoint[0] + shape.width / 2 + 30, xAxisPoint[1]];

            ctx.moveTo(p0[0], p0[1]); //0
            ctx.lineTo(p1[0], p1[1]); //1
            ctx.lineTo(p2[0], p2[1]); //2
            ctx.lineTo(p3[0], p3[1]); //3
            ctx.lineTo(p4[0], p4[1]); //4
            ctx.lineTo(p0[0], p0[1]); //0
            ctx.closePath();
        }
    });
    var MyCubeShadow2_2 = echarts.graphic.extendShape({
        shape: {
            x: 0,
            y: 0,
            width: 48,
            zWidth: 8,
            zHeight: 4,
        },
        buildPath: function (ctx, shape) {
            const api = shape.api;
            const xAxisPoint = api.coord([shape.xValue, 0]);
            const p0 = [shape.x, shape.y];
            const p1 = [shape.x - shape.width / 2 + 30, shape.y];
            const p4 = [shape.x + shape.width / 2 + 30, shape.y];
            const p6 = [shape.x + shape.width / 2 + shape.zWidth + 30, shape.y - shape.zHeight];
            const p7 = [shape.x - shape.width / 2 + shape.zWidth + 30, shape.y - shape.zHeight];
            const p3 = [xAxisPoint[0] + shape.width / 2 + 30, xAxisPoint[1]];
            const p5 = [xAxisPoint[0] + shape.width / 2 + shape.zWidth + 30, xAxisPoint[1] - shape.zHeight];

            ctx.moveTo(p4[0], p4[1]); //4
            ctx.lineTo(p3[0], p3[1]); //3
            ctx.lineTo(p5[0], p5[1]); //5
            ctx.lineTo(p6[0], p6[1]); //6
            ctx.lineTo(p4[0], p4[1]); //4

            ctx.moveTo(p4[0], p4[1]); //4
            ctx.lineTo(p6[0], p6[1]); //6
            ctx.lineTo(p7[0], p7[1]); //7
            ctx.lineTo(p1[0], p1[1]); //1
            ctx.lineTo(p4[0], p4[1]); //4
            ctx.closePath();
        }
    });
    echarts.graphic.registerShape('MyCubeRect2_2', MyCubeRect2_2);
    echarts.graphic.registerShape('MyCubeShadow2_2', MyCubeShadow2_2);
    //三柱立体阴影
    var MyCubeRect3_1 = echarts.graphic.extendShape({
        shape: {
            x: 0,
            y: 0,
            width: 12, //柱宽
            zWidth: 6, //阴影折角宽
            zHeight: 3, //阴影折角高
        },
        buildPath: function (ctx, shape) {
            const api = shape.api;
            const xAxisPoint = api.coord([shape.xValue, 0]);
            const p0 = [shape.x - shape.width - shape.width / 4 * 5, shape.y];
            const p1 = [shape.x - shape.width - shape.width / 4 * 5, shape.y];
            const p4 = [shape.x + shape.width - shape.width - shape.width / 4 * 5, shape.y];
            const p2 = [xAxisPoint[0] - shape.width - shape.width / 4 * 5, xAxisPoint[1]];
            const p3 = [xAxisPoint[0] + shape.width - shape.width - shape.width / 4 * 5, xAxisPoint[1]];

            ctx.moveTo(p0[0], p0[1]); //0
            ctx.lineTo(p1[0], p1[1]); //1
            ctx.lineTo(p2[0], p2[1]); //2
            ctx.lineTo(p3[0], p3[1]); //3
            ctx.lineTo(p4[0], p4[1]); //4
            ctx.lineTo(p0[0], p0[1]); //0
            ctx.closePath();
        }
    });
    var MyCubeShadow3_1 = echarts.graphic.extendShape({
        shape: {
            x: 0,
            y: 0,
            width: 12,
            zWidth: 6,
            zHeight: 3,
        },
        buildPath: function (ctx, shape) {
            const api = shape.api;
            const xAxisPoint = api.coord([shape.xValue, 0]);
            const p0 = [shape.x - shape.width / 4 * 5, shape.y];
            const p1 = [shape.x - shape.width - shape.width / 4 * 5, shape.y];
            const p4 = [shape.x - shape.width / 4 * 5, shape.y];
            const p6 = [shape.x + shape.zWidth - shape.width / 4 * 5, shape.y - shape.zHeight];
            const p7 = [shape.x - shape.width + shape.zWidth - shape.width / 4 * 5, shape.y - shape.zHeight];
            const p3 = [xAxisPoint[0] - shape.width / 4 * 5, xAxisPoint[1]];
            const p5 = [xAxisPoint[0] + shape.zWidth - shape.width / 4 * 5, xAxisPoint[1] - shape.zHeight];

            ctx.moveTo(p4[0], p4[1]); //4
            ctx.lineTo(p3[0], p3[1]); //3
            ctx.lineTo(p5[0], p5[1]); //5
            ctx.lineTo(p6[0], p6[1]); //6
            ctx.lineTo(p4[0], p4[1]); //4

            ctx.moveTo(p4[0], p4[1]); //4
            ctx.lineTo(p6[0], p6[1]); //6
            ctx.lineTo(p7[0], p7[1]); //7
            ctx.lineTo(p1[0], p1[1]); //1
            ctx.lineTo(p4[0], p4[1]); //4
            ctx.closePath();
        }
    });
    echarts.graphic.registerShape('MyCubeRect3_1', MyCubeRect3_1);
    echarts.graphic.registerShape('MyCubeShadow3_1', MyCubeShadow3_1);
    var MyCubeRect3_2 = echarts.graphic.extendShape({
        shape: {
            x: 0,
            y: 0,
            width: 12, //柱宽
            zWidth: 6, //阴影折角宽
            zHeight: 3, //阴影折角高
        },
        buildPath: function (ctx, shape) {
            const api = shape.api;
            const xAxisPoint = api.coord([shape.xValue, 0]);
            const p0 = [shape.x - shape.width / 2, shape.y];
            const p1 = [shape.x - shape.width / 2, shape.y];
            const p4 = [shape.x + shape.width - shape.width / 2, shape.y];
            const p2 = [xAxisPoint[0] - shape.width / 2, xAxisPoint[1]];
            const p3 = [xAxisPoint[0] + shape.width - shape.width / 2, xAxisPoint[1]];

            ctx.moveTo(p0[0], p0[1]); //0
            ctx.lineTo(p1[0], p1[1]); //1
            ctx.lineTo(p2[0], p2[1]); //2
            ctx.lineTo(p3[0], p3[1]); //3
            ctx.lineTo(p4[0], p4[1]); //4
            ctx.lineTo(p0[0], p0[1]); //0
            ctx.closePath();
        }
    });
    var MyCubeShadow3_2 = echarts.graphic.extendShape({
        shape: {
            x: 0,
            y: 0,
            width: 12,
            zWidth: 6,
            zHeight: 3,
        },
        buildPath: function (ctx, shape) {
            const api = shape.api;
            const xAxisPoint = api.coord([shape.xValue, 0]);
            const p0 = [shape.x - shape.width / 2, shape.y];
            const p1 = [shape.x - shape.width / 2, shape.y];
            const p4 = [shape.x + shape.width - shape.width / 2, shape.y];
            const p6 = [shape.x + shape.width + shape.zWidth - shape.width / 2, shape.y - shape.zHeight];
            const p7 = [shape.x + shape.zWidth - shape.width / 2, shape.y - shape.zHeight];
            const p3 = [xAxisPoint[0] + shape.width - shape.width / 2, xAxisPoint[1]];
            const p5 = [xAxisPoint[0] + shape.width + shape.zWidth - shape.width / 2, xAxisPoint[1] - shape.zHeight];

            ctx.moveTo(p4[0], p4[1]); //4
            ctx.lineTo(p3[0], p3[1]); //3
            ctx.lineTo(p5[0], p5[1]); //5
            ctx.lineTo(p6[0], p6[1]); //6
            ctx.lineTo(p4[0], p4[1]); //4

            ctx.moveTo(p4[0], p4[1]); //4
            ctx.lineTo(p6[0], p6[1]); //6
            ctx.lineTo(p7[0], p7[1]); //7
            ctx.lineTo(p1[0], p1[1]); //1
            ctx.lineTo(p4[0], p4[1]); //4
            ctx.closePath();
        }
    });
    echarts.graphic.registerShape('MyCubeRect3_2', MyCubeRect3_2);
    echarts.graphic.registerShape('MyCubeShadow3_2', MyCubeShadow3_2);
    var MyCubeRect3_3 = echarts.graphic.extendShape({
        shape: {
            x: 0,
            y: 0,
            width: 12, //柱宽
            zWidth: 6, //阴影折角宽
            zHeight: 3, //阴影折角高
        },
        buildPath: function (ctx, shape) {
            const api = shape.api;
            const xAxisPoint = api.coord([shape.xValue, 0]);
            const p0 = [shape.x + shape.width / 4 * 5, shape.y];
            const p1 = [shape.x + shape.width / 4 * 5, shape.y];
            const p4 = [shape.x + shape.width + shape.width / 4 * 5, shape.y];
            const p2 = [xAxisPoint[0] + shape.width / 4 * 5, xAxisPoint[1]];
            const p3 = [xAxisPoint[0] + shape.width + shape.width / 4 * 5, xAxisPoint[1]];

            ctx.moveTo(p0[0], p0[1]); //0
            ctx.lineTo(p1[0], p1[1]); //1
            ctx.lineTo(p2[0], p2[1]); //2
            ctx.lineTo(p3[0], p3[1]); //3
            ctx.lineTo(p4[0], p4[1]); //4
            ctx.lineTo(p0[0], p0[1]); //0
            ctx.closePath();
        }
    });
    var MyCubeShadow3_3 = echarts.graphic.extendShape({
        shape: {
            x: 0,
            y: 0,
            width: 12,
            zWidth: 6,
            zHeight: 3,
        },
        buildPath: function (ctx, shape) {
            const api = shape.api;
            const xAxisPoint = api.coord([shape.xValue, 0]);
            const p0 = [shape.x + shape.width / 4 * 5, shape.y];
            const p1 = [shape.x + shape.width / 4 * 5, shape.y];
            const p4 = [shape.x + shape.width + shape.width / 4 * 5, shape.y];
            const p6 = [shape.x + shape.width + shape.zWidth + shape.width / 4 * 5, shape.y - shape.zHeight];
            const p7 = [shape.x + shape.zWidth + shape.width / 4 * 5, shape.y - shape.zHeight];
            const p3 = [xAxisPoint[0] + shape.width + shape.width / 4 * 5, xAxisPoint[1]];
            const p5 = [xAxisPoint[0] + shape.width + shape.zWidth + shape.width / 4 * 5, xAxisPoint[1] - shape.zHeight];

            ctx.moveTo(p4[0], p4[1]); //4
            ctx.lineTo(p3[0], p3[1]); //3
            ctx.lineTo(p5[0], p5[1]); //5
            ctx.lineTo(p6[0], p6[1]); //6
            ctx.lineTo(p4[0], p4[1]); //4

            ctx.moveTo(p4[0], p4[1]); //4
            ctx.lineTo(p6[0], p6[1]); //6
            ctx.lineTo(p7[0], p7[1]); //7
            ctx.lineTo(p1[0], p1[1]); //1
            ctx.lineTo(p4[0], p4[1]); //4
            ctx.closePath();
        }
    });
    echarts.graphic.registerShape('MyCubeRect3_3', MyCubeRect3_3);
    echarts.graphic.registerShape('MyCubeShadow3_3', MyCubeShadow3_3);

    //总体投资情况
    var myChart1 = echarts.init(document.getElementById('chart1'));
    var zttzqk = [0,  0, 0, 0];
    var option1 = {
        tooltip: {
            trigger: 'axis',
            axisPointer: {            // 坐标轴指示器，坐标轴触发有效
                type: 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
            }
        },
        grid: {
            borderWidth: 0,
            x: 100,
            x2: 50,
            y: 10,
            y2: 40
        },
        calculable: true,
        xAxis: [
            {
                type: 'category',
                axisLabel: {
                    rotate: 20
                },
                data: ['概算',  '已完成', '未完成', '预计完成']
            }
        ],
        yAxis: [
            {
                type: 'value'
            }
        ],
        series: [
            {
                name: '单位(万元)',
                barWidth: '33%',
                type: 'custom',
                itemStyle: {
                    normal: {
                        color: function (params) {
                            var colorList = ['#76b5f5',  '#FF6695', '#867DFA', '#69dcbb'];
                            return colorList[params.dataIndex]
                        }
                    },
                },
                renderItem: function (params, api) {
                    var colorList = ['#76b5f5',  '#FF6695', '#867DFA', '#69dcbb'];
                    var colorList1 = ['#76a5f5',  '#FF5695', '#866DFA', '#69ccbb'];
                    let location = api.coord([api.value(0), api.value(1)]);
                    return {
                        type: 'group',
                        children: [{
                            type: 'MyCubeRect',
                            shape: {
                                api,
                                xValue: api.value(0),
                                yValue: api.value(1),
                                x: location[0],
                                y: location[1]
                            },
                            style: {
                                fill: colorList[params.dataIndex]
                            }
                        }, {
                            type: 'MyCubeShadow',
                            shape: {
                                api,
                                xValue: api.value(0),
                                yValue: api.value(1),
                                x: location[0],
                                y: location[1]
                            },
                            style: {
                                fill: colorList1[params.dataIndex]
                            }
                        }]
                    };
                },
                data: zttzqk
            }
        ]
    };
    myChart1.setOption(option1);
    //年度投资情况
    var myChart2 = echarts.init(document.getElementById('chart2'));
    var ndtzqk = [0, 0, 0];
    var option2 = {
        tooltip: {
            trigger: 'axis',
            axisPointer: {            // 坐标轴指示器，坐标轴触发有效
                type: 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
            }
        },
        grid: {
            borderWidth: 0,
            x: 100,
            x2: 50,
            y: 10,
            y2: 40
        },
        calculable: true,
        xAxis: [
            {
                type: 'category',
                axisLabel: {
                    rotate: 20
                },
                data: ['本年度目标', '本年度已完成', '本年度预计完成']
            }
        ],
        yAxis: [
            {
                type: 'value'
            }
        ],
        series: [
            {
                name: '单位(万元)',
                barWidth: '33%',
                type: 'custom',
                itemStyle: {
                    normal: {
                        color: function (params) {
                            var colorList = ['#fb8b80', '#FF6695', '#FA7DD9'];
                            return colorList[params.dataIndex]
                        }
                    },
                },
                renderItem: function (params, api) {
                    var colorList = ['#fb8b80', '#FF6695', '#FA7DD9'];
                    var colorList1 = ['#fb7b80', '#FF5695', '#FA6DD9'];
                    let location = api.coord([api.value(0), api.value(1)]);
                    return {
                        type: 'group',
                        children: [{
                            type: 'MyCubeRect',
                            shape: {
                                api,
                                xValue: api.value(0),
                                yValue: api.value(1),
                                x: location[0],
                                y: location[1]
                            },
                            style: {
                                fill: colorList[params.dataIndex]
                            }
                        }, {
                            type: 'MyCubeShadow',
                            shape: {
                                api,
                                xValue: api.value(0),
                                yValue: api.value(1),
                                x: location[0],
                                y: location[1]
                            },
                            style: {
                                fill: colorList1[params.dataIndex]
                            }
                        }]
                    };
                },
                data: ndtzqk
            }
        ]
    };
    myChart2.setOption(option2);
    //月度投资情况
    var myChart3 = echarts.init(document.getElementById('chart3'));
    var ydtzqk = [0, 0, 0];
    var option3 = {
        tooltip: {
            trigger: 'axis',
            axisPointer: {            // 坐标轴指示器，坐标轴触发有效
                type: 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
            }
        },
        grid: {
            borderWidth: 0,
            x: 100,
            x2: 50,
            y: 10,
            y2: 40
        },
        calculable: true,
        xAxis: [
            {
                type: 'category',
                axisLabel: {
                    rotate: 20
                },
                data: ['本月度目标', '本月度已完成', '本月度预计完成']
            }
        ],
        yAxis: [
            {
                type: 'value'
            }
        ],
        series: [
            {
                name: '单位(万元)',
                barWidth: '33%',
                type: 'custom',
                itemStyle: {
                    normal: {
                        color: function (params) {
                            var colorList = ['#fb8b80', '#FF6695', '#7DBAF9'];
                            return colorList[params.dataIndex]
                        }
                    },
                },
                renderItem: function (params, api) {
                    var colorList = ['#fb8b80', '#FF6695', '#7DBAF9'];
                    var colorList1 = ['#fb7b80', '#FF5695', '#7DAAF9'];
                    let location = api.coord([api.value(0), api.value(1)]);
                    return {
                        type: 'group',
                        children: [{
                            type: 'MyCubeRect',
                            shape: {
                                api,
                                xValue: api.value(0),
                                yValue: api.value(1),
                                x: location[0],
                                y: location[1]
                            },
                            style: {
                                fill: colorList[params.dataIndex]
                            }
                        }, {
                            type: 'MyCubeShadow',
                            shape: {
                                api,
                                xValue: api.value(0),
                                yValue: api.value(1),
                                x: location[0],
                                y: location[1]
                            },
                            style: {
                                fill: colorList1[params.dataIndex]
                            }
                        }]
                    };
                },
                data: ydtzqk
            }
        ]
    };
    myChart3.setOption(option3);
    //投资完成额曲线(万元)
  //  var myChart4 = echarts.init(document.getElementById('chart4'));
    //月份列表
    var dateArray = ['2020-01', '2020-02', '2020-03', '2020-04', '2020-05', '2020-06', '2020-07', '2020-08', '2020-09', '2020-10', '2020-11', '2020-12'];
    //投资完成额数据
    var tzwce = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    //付款确认额数据
    var fkqre = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    //累计投资完成额数据
    var ljtzwce = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    //累计付款确认额数据
    var ljfkqre = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  /*  var option4 = {
        grid: {
            borderWidth: 0,
            x: 100,
            x2: 50,
            y: 50,
            y2: 60
        },

        tooltip: {
            trigger: 'axis',
            axisPointer: {            // 坐标轴指示器，坐标轴触发有效
                type: 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
            },
        },
        legend: {
            data: ['投资完成额', '付款确认额', "累计投资完成额", "累计付款确认额"]
        },

        calculable: true,
        xAxis: [
            {
                splitLine: { show: false },//去除网格线
                type: 'category',
                data: dateArray
            }
        ],
        yAxis: [
            {
                type: 'value'
            }
        ],
        series: [
            {
                name: '投资完成额',
                type: 'bar',
                itemStyle: {
                    normal: {
                        color: '#7CBBF9'
                    }
                },
                data: tzwce
            },
            {
                name: '付款确认额',
                type: 'bar',
                itemStyle: {
                    normal: {
                        color: '#FF6695'
                    }
                },
                data: fkqre
            },
            {
                name: '累计投资完成额',
                type: 'line',
                itemStyle: {
                    normal: {
                        color: '#feb43b'
                    }
                },
                data: ljtzwce
            },
            {
                name: '累计付款确认额',
                type: 'line',
                itemStyle: {
                    normal: {
                        color: '#63cda7'
                    }
                },
                data: ljfkqre
            }
        ]
    };
    myChart4.setOption(option4);
*/
    //总体投资情况
    var myChart6 = echarts.init(document.getElementById('chart6'));
    var option6 = {
        title: {
            text: '',
            subtext: '',
            left: 'center'
        },
        tooltip: {
            trigger: 'item',
            formatter: '{a} <br/>{b} : {c} ({d}%)'
        },
        legend: {
            orient: 'vertical',
            left: 'left',
            data: ['已完成目标', '未完成目标']
        },
        color: ['#FB8B7F', '#7EBAF9'],
        series: [
            {
                name: '金额(万元)',
                type: 'pie',
                radius: '55%',
                center: ['50%', '60%'],
                data: [
                    { value: 0, name: '已完成目标' },
                    { value: 0, name: '未完成目标' }
                ],
                emphasis: {
                    itemStyle: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0, 0, 0, 0.5)'
                    }
                }
            }
        ]
    };
    myChart6.setOption(option6);
    //年度投资情况
    var myChart7 = echarts.init(document.getElementById('chart7'));
    var option7 = {
        title: {
            text: '',
            subtext: '',
            left: 'center'
        },
        tooltip: {
            trigger: 'item',
            formatter: '{a} <br/>{b} : {c} ({d}%)'
        },
        legend: {
            orient: 'vertical',
            left: 'left',
            data: ['本年度已完成目标', '本年度未完成目标']
        },
        color: ['#FF6695', '#867DFA'],
        series: [
            {
                name: '金额(万元)',
                type: 'pie',
                radius: '55%',
                center: ['50%', '60%'],
                data: [
                    { value: 0, name: '本年度已完成目标' },
                    { value: 0, name: '本年度未完成目标' }
                ],
                emphasis: {
                    itemStyle: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0, 0, 0, 0.5)'
                    }
                }
            }
        ]
    };
    myChart7.setOption(option7);
    //月度投资情况
    var myChart8 = echarts.init(document.getElementById('chart8'));
    var option8 = {
        title: {
            text: '',
            subtext: '',
            left: 'center'
        },
        tooltip: {
            trigger: 'item',
            formatter: '{a} <br/>{b} : {c} ({d}%)'
        },
        legend: {
            orient: 'vertical',
            left: 'left',
            data: ['本月度已完成目标', '本月度未完成目标']
        },
        color: ['#FEB43B', '#7D9AF8'],
        series: [
            {
                name: '金额(万元)',
                type: 'pie',
                radius: '55%',
                center: ['50%', '60%'],
                data: [
                    { value: 0, name: '本月度已完成目标' },
                    { value: 0, name: '本月度未完成目标' }
                ],
                emphasis: {
                    itemStyle: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0, 0, 0, 0.5)'
                    }
                }
            }
        ]
    };
    myChart8.setOption(option8);
    //月度投资情况
    var myChart9 = echarts.init(document.getElementById('chart9'));
    var option9 = {
        title: {
            text: '',
            subtext: '',
            left: 'center'
        },
        tooltip: {
            trigger: 'item',
            formatter: '{a} <br/>{b} : {c} ({d}%)'
        },
        legend: {
            orient: 'vertical',
            left: 'left',
            data: ['累计确认付款', '剩余目标金额']
        },
        color: ['#63cda7', '#feb43b'],
        series: [
            {
                name: '金额(万元)',
                type: 'pie',
                radius: '55%',
                center: ['50%', '60%'],
                data: [
                    { value: 0, name: '累计确认付款' },
                    { value: 0, name: '剩余目标金额' }
                ],
                emphasis: {
                    itemStyle: {
                        shadowBlur: 10,
                        shadowOffsetX: 0,
                        shadowColor: 'rgba(0, 0, 0, 0.5)'
                    }
                }
            }
        ]
    };
    myChart9.setOption(option9);
    var url_keyvalue1 = "";
    var url_keyvalue2 = "";


    // --Aledit 01-25
    //合同执行情况
    var epsid = sessiondata.EpsProjId;
    var ysje_5 = [];
    var zzje_5 = [];
    var hts_5 = [];
    $.ajax({
        url: "/StoreReport/GetConPerformance",
        data: {
            epsid: epsid
        },
        async: false,
        dataType: "JSON",
        success: function (data) {
            var dt = data.data;
            ysje_5 = dt.ay1;
            zzje_5 = dt.ay2;
            hts_5 = dt.ay3;
        }
    });
    var myChart5 = echarts.init(document.getElementById('chart5'));
    var htlb_5 = ['服务类', '采购类', "工程类", "其它"];
    // //合同金额数据
    // var ysje_5 = [ 2, 3, 6, 4];
    // //付款金额数据
    // var zzje_5 = [ 0, 4, 0, 3];
    // //合同数
    // var hts_5 = [ 6, 8, 5, 1];
    var option5 = {
        grid: {
            borderWidth: 0,
            x: 100,
            x2: 50,
            y: 50,
            y2: 50
        },

        tooltip: {
            trigger: 'axis',
            axisPointer: {            // 坐标轴指示器，坐标轴触发有效
                type: 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
            },
        },
        legend: {
            data: ['合同金额', '付款金额', "合同数"]
        },

        calculable: true,
        xAxis: [
            {
                splitLine: { show: false },//去除网格线
                type: 'category',
                data: htlb_5
            }
        ],
        yAxis: [
            {
                type: 'value',
                splitNumber: 6,
                axisLabel: {
                    formatter: '{value} 万元'
                }
            },
            {
                type: 'value',
                splitNumber: 6,
                axisLabel: {
                    formatter: '{value} 个'
                }
            }
        ],
        series: [
            {
                name: '合同金额',
                type: 'custom',
                itemStyle: {
                    normal: {
                        color: '#FD6417'
                    }
                },
                renderItem: function (params, api) {
                    let location = api.coord([api.value(0), api.value(1)]);
                    return {
                        type: 'group',
                        children: [{
                            type: 'MyCubeRect3_1',
                            shape: {
                                api,
                                xValue: api.value(0),
                                yValue: api.value(1),
                                x: location[0],
                                y: location[1]
                            },
                            style: {
                                fill: "#FD6417"
                            }
                        }, {
                            type: 'MyCubeShadow3_1',
                            shape: {
                                api,
                                xValue: api.value(0),
                                yValue: api.value(1),
                                x: location[0],
                                y: location[1]
                            },
                            style: {
                                fill: "#FD5417"
                            }
                        }]
                    };
                },
                data: ysje_5
            },
            {
                name: '付款金额',
                type: 'custom',
                itemStyle: {
                    normal: {
                        color: '#02BDFB'
                    }
                },
                renderItem: function (params, api) {
                    let location = api.coord([api.value(0), api.value(1)]);
                    return {
                        type: 'group',
                        children: [{
                            type: 'MyCubeRect3_2',
                            shape: {
                                api,
                                xValue: api.value(0),
                                yValue: api.value(1),
                                x: location[0],
                                y: location[1]
                            },
                            style: {
                                fill: "#02BDFB"
                            }
                        }, {
                            type: 'MyCubeShadow3_2',
                            shape: {
                                api,
                                xValue: api.value(0),
                                yValue: api.value(1),
                                x: location[0],
                                y: location[1]
                            },
                            style: {
                                fill: "#02ADFB"
                            }
                        }]
                    };
                },
                data: zzje_5
            },
            {
                name: '合同数',
                type: 'line',
                yAxisIndex: 1,
                itemStyle: {
                    normal: {
                        color: '#63cda7'
                    }
                },
                data: hts_5
            }
        ]
    };
    myChart5.setOption(option5);





    $(function () {
        // Alroyadd 01-21
        var epsid = sessiondata.EpsProjId;
        var cols = [];
        var colTitles= [];//费用类型名称，记录下来方便取值
        var CbsTitle = [];//费用类型返回值
        var data;

        //费用类型查找，存到cols里面
        $.ajax({
            url: "/Cost/GetCBSSheetHeaderc",
            data: {
                strEpsProjId: epsid
            },
            async: false,
            dataType: "JSON",
            success: function (headerData) {
                CbsTitle = headerData.list;
            }
        });
        $.each(CbsTitle, function () {
            cols.push(this.Id);
            colTitles.push(this.CbsTitle);
        });

        //找金额汇总
        $.ajax({
            url: "/Cost/CBSShare",
            data: { proj_Guid: epsid },
            async: false,
            dataType: "JSON",
            success: function (text) {
                var o = mini.decode(text);
                if (o.success) {
                    data = mini.arrayToTree(o.data.value, "children", "Id", "ParentId");
                    for (var i = 0; i < data.length; i++) {
                        fnmax(data[i]);
                    }
                }
                else
                    Power.ui.warning(o.message, { detail: o.detail, timeout: 0, position: "center center", closeable: true });
            }
        });
        var dt = data[0];
        var jsNo =parseFloat(dt[cols[0]])/10000;
        var azNo =parseFloat(dt[cols[1]])/10000;
        var sbNo =parseFloat(dt[cols[2]])/10000;
        var clNo =parseFloat(dt[cols[3]])/10000;
        var qtNo =parseFloat(dt[cols[4]])/10000;
        var sumContract = jsNo+azNo+sbNo+clNo+qtNo;
        //1、项目概算
        document.getElementById("ProGSum").innerHTML = format_number(sumContract.toFixed(0)) + "<small></small>";
        document.getElementById("ProG_JS").innerHTML = format_number(jsNo.toFixed(0));
        document.getElementById("ProG_AZ").innerHTML = format_number(azNo.toFixed(0));
        document.getElementById("ProG_CL").innerHTML = format_number(clNo.toFixed(0));
        document.getElementById("ProG_SB").innerHTML = format_number(sbNo.toFixed(0));
        document.getElementById("ProG_QT").innerHTML = format_number(qtNo.toFixed(0));


        //2、累计合同金额（万元）
        //3、累计支付金额（万元）
        $.ajax({
            url: "/StoreReport/GetConAmount",
            data: {"epsid":epsid},
            type: "post",
            async: false,
            success: function (text) {
                var data = mini.decode(text);
                if(data.success == true){
                    var dt =data.data;
                    document.getElementById("ContSum").innerHTML = format_number(parseFloat(dt.ContSum).toFixed(0)) + "<small></small>";
                    document.getElementById("Cont_Year").innerHTML = format_number(parseFloat(dt.Cont_Year).toFixed(0));
                    document.getElementById("Cont_Month").innerHTML = format_number(parseFloat(dt.Cont_Month).toFixed(0));
                    document.getElementById("Cont_GSB").innerHTML = format_number((parseFloat(dt.ContSum) / parseFloat(sumContract) * 100).toFixed(0));

                    document.getElementById("PaySum").innerHTML = format_number(parseFloat(dt.PaySum).toFixed(0)) + "<small></small>";
                    document.getElementById("Pay_Year").innerHTML = format_number(parseFloat(dt.Pay_Year).toFixed(0));
                    document.getElementById("Pay_Month").innerHTML = format_number(parseFloat(dt.Pay_Month).toFixed(0));
                    document.getElementById("Pay_HTB").innerHTML = format_number((parseFloat(dt.PaySum) / parseFloat(dt.ContSum) * 100).toFixed(0));
                    document.getElementById("Pay_MBB").innerHTML = format_number((parseFloat(dt.PaySum) / parseFloat(sumContract) * 100).toFixed(0));
                    // var div = document.getElementById('div4');
                    // div.addEventListener('click', viewdiv4);
                }
            }
        });

        // 自定义方法
        function fnmax (node) {
            var obj = {};
            if (node["type"] == "wbs") return obj;
            for (var i = 0; i < cols.length; i++) {
                    obj[cols[i]] = node[cols[i]] == null ? 0 : parseFloat(node[cols[i]]);
            }
            if (node.children && node.children.length > 0) {
                for (var i = 0; i < node.children.length; i++) {
                        var temp = fnmax(node.children[i]);
                        for (var j = 0; j < cols.length; j++) {
                            obj[cols[j]] += temp[cols[j]] == null ? 0 : parseFloat(temp[cols[j]]);
                        }
                }
            }

            for (var i = 0; i < cols.length; i++) {
                node[cols[i]] = obj[cols[i]];
            }
            return obj;
        }

        //合同执行情况图表
        var exec = {};  //对象
        exec.KeyWord = "YLSH_CON_SubContract";
        exec.MethodName = "chartTHZXQK";
        exec.MethodParams = {};
        var params = exec.MethodParams;
        params.EpsId = sessiondata.EpsProjId;
        var txt = mini.encode(exec);
        $.ajax({
            url: "/API/Exec",
            async: false,
            type: "POST",
            data: { jsonData: txt },
            cache: false,
            success: function (text) {
                var tmp = mini.decode(text);
                if (tmp.data.value != "") {
                    option5.series[0].data = tmp.data.value[0];
                    option5.series[1].data = tmp.data.value[1];
                    option5.series[2].data = tmp.data.value[2];
                    option5.series[3].data = tmp.data.value[3];
                    var arr = new Array();
                    arr[0] = tmp.data.value[0];
                    arr[1] = tmp.data.value[1];
                    arr[2] = tmp.data.value[2];
                    option5.yAxis[0].max = calMax(arr, 1000);
                    option5.yAxis[0].interval = parseInt(option5.yAxis[0].max) / 6;
                    var arr1 = new Array();
                    arr1[0] = tmp.data.value[3];
                    option5.yAxis[1].max = calMax(arr1, 1);
                    option5.yAxis[1].interval = parseInt(option5.yAxis[1].max) / 6;
                    myChart5.setOption(option5);
                    myChart5.on('click', function (params) {
                        var name = params.name;
                        var url = "/Form/EditForm/92838649-bb44-4d25-8bf1-2520114c117a/"
                        // encodeURIComponent(url)
                        mini.open({
                            showMaxButton: true,
                            width: "1200",
                            height: "600",
                            url: url,
                            onload: function () {
                                var iframe = this.getIFrameEl();
                                iframe.contentWindow.SetData(name);
                            },
                            ondestroy: function (result) {
                            }
                        });
                    });
                }
            }
        });
        //总体投资情况图表
    /*    $.ajax({
            url: "/Progress/ActionProc",
            type: "POST",
            data: {
                ProcName: "P_YLSH_COS_OverallInvestmentBar",
                ProcParamsName: "@EpsProjId,@Type",
                ProcParamsValue: sessiondata.EpsProjId + ",Overall",
                Type: "Table"
            },
            cache: false,
            async: false,
            success: function (data) {
                var tmp = mini.decode(data);
                var data_str = [0, 0, 0, 0, 0];
                if (tmp[0] != undefined) {
                    data_str[0] = parseFloat((tmp[0].BudgetCost == null ? 0 : tmp[0].BudgetCost).toFixed(0));
                    data_str[1] = parseFloat((tmp[0].TargetCost == null ? 0 : tmp[0].TargetCost).toFixed(0));
                    data_str[2] = parseFloat((tmp[0].Finished == null ? 0 : tmp[0].Finished).toFixed(0));
                    data_str[3] = parseFloat((tmp[0].Unfinished == null ? 0 : tmp[0].Unfinished).toFixed(0));
                    data_str[4] = parseFloat((tmp[0].Expected == null ? 0 : tmp[0].Expected).toFixed(0));
                }
                option1.series[0].data = data_str;
                myChart1.setOption(option1);
                myChart1.on('click', function (params) { 
                });
                option6.series[0].data[0].value = parseFloat(parseFloat(data_str[2]).toFixed(0));
                option6.series[0].data[1].value = parseFloat(parseFloat(data_str[3]).toFixed(0));
                myChart6.setOption(option6);
       
            }
        });
		*/
			  var params = {};
                params.ProcName = "yr_fy_bbzx";
                params.ProcParamsName = "@eps";
               params.ProcParamsValue = sessiondata.EpsProjId;
			    params.Type = "Table";
				
				FormFuns.APIExec("YR_jd_gclzl","BO","ActionProc", params, function(text){
                    var data1 = mini.decode(text);
					var tmp=mini.decode(data1.data.value)
	 
                var data_str = [0, 0, 0, 0];
                if (tmp[0] != undefined) {
                    data_str[0] = parseFloat((tmp[0].v1 == null ? 0 : tmp[0].v1).toFixed(0));
                    data_str[1] = parseFloat((tmp[0].v2 == null ? 0 : tmp[0].v2).toFixed(0));
                    data_str[2] = parseFloat((tmp[0].v3 == null ? 0 : tmp[0].v3).toFixed(0));
                    data_str[3] = parseFloat((tmp[0].v4 == null ? 0 : tmp[0].v4).toFixed(0));
                  //  data_str[4] = parseFloat((tmp[0].Expected == null ? 0 : tmp[0].Expected).toFixed(0));
                }
                option1.series[0].data = data_str;
                myChart1.setOption(option1);  
                option6.series[0].data[0].value = parseFloat(parseFloat(data_str[1]).toFixed(0));
                option6.series[0].data[1].value = parseFloat(parseFloat(data_str[2]).toFixed(0));
                myChart6.setOption(option6);
       
	        var data_str = [0, 0, 0];
                if (tmp[0] != undefined) {
                    data_str[0] = parseFloat((tmp[0].v5 == null ? 0 : tmp[0].v5).toFixed(0));
                    data_str[1] = parseFloat((tmp[0].v6 == null ? 0 : tmp[0].v6).toFixed(0));
                    data_str[2] = parseFloat((tmp[0].v8 == null ? 0 : tmp[0].v8).toFixed(0));
                }
                option2.series[0].data = data_str;
                myChart2.setOption(option2);
	      option7.series[0].data[0].value = parseFloat(parseFloat(data_str[1]).toFixed(0));
                option7.series[0].data[1].value = parseFloat((parseFloat(data_str[0]) - parseFloat(data_str[1])).toFixed(0));
                myChart7.setOption(option7);
				
				 var data_str = [0, 0, 0];
                if (tmp[0] != undefined) {
                    data_str[0] = parseFloat((tmp[0].v9 == null ? 0 : tmp[0].v9).toFixed(0));
                    data_str[1] = parseFloat((tmp[0].v10 == null ? 0 : tmp[0].v10).toFixed(0));
                    data_str[2] = parseFloat((tmp[0].v12 == null ? 0 : tmp[0].v12).toFixed(0));
                }
                option3.series[0].data = data_str;
                myChart3.setOption(option3);
				
				  option8.series[0].data[0].value = parseFloat(parseFloat(data_str[1]).toFixed(0));
                option8.series[0].data[1].value = parseFloat((parseFloat(data_str[0]) - parseFloat(data_str[1])).toFixed(0));
                myChart8.setOption(option8);
	   
	      option9.series[0].data[0].value = parseFloat((tmp[0].v13 == null ? 0 : tmp[0].v13).toFixed(0))// parseFloat(parseFloat(tmp.data.value[1][tmp.data.value[1].length - 1]).toFixed(0));
                    option9.series[0].data[1].value = parseFloat((tmp[0].v14 == null ? 0 : tmp[0].v14).toFixed(0))// parseFloat((parseFloat(data_str2[data_str2.length - 1]) - parseFloat(tmp.data.value[1][tmp.data.value[1].length - 1])).toFixed(0));
                    myChart9.setOption(option9);
          
        });
        //年度投资情况图表
     /*   $.ajax({
            url: "/Progress/ActionProc",
            type: "POST",
            data: {
                ProcName: "P_YLSH_COS_OverallInvestmentBar",
                ProcParamsName: "@EpsProjId,@Type",
                ProcParamsValue: sessiondata.EpsProjId + ",Year",
                Type: "Table"
            },
            cache: false,
            async: false,
            success: function (data) {
                var tmp = mini.decode(data);
                var data_str = [0, 0, 0];
                if (tmp[0] != undefined) {
                    data_str[0] = parseFloat((tmp[0].ThisYearTarget == null ? 0 : tmp[0].ThisYearTarget).toFixed(0));
                    data_str[1] = parseFloat((tmp[0].ThisYearFinished == null ? 0 : tmp[0].ThisYearFinished).toFixed(0));
                    data_str[2] = parseFloat((tmp[0].Expected == null ? 0 : tmp[0].Expected).toFixed(0));
                }
                option2.series[0].data = data_str;
                myChart2.setOption(option2);
                myChart2.on('click', function (params) {
                    if (params.name == "本年度目标") {
                        var url = "/Form/EditForm/1df45972-b4c2-45ca-b0f3-6d2d4acbba9a/";
                        mini.open({
                            showMaxButton: true,
                            width: "1200",
                            height: "600",
                            url: url,
                            onload: function () {
                                var iframe = this.getIFrameEl();
                            },
                            ondestroy: function (result) {
                            }
                        });
                    }
                    else if (params.name == "本年度已完成") {
                        var url = "/Form/EditForm/32b01617-2264-431e-9840-744164cc8925/";
                        mini.open({
                            showMaxButton: true,
                            width: "1200",
                            height: "600",
                            url: url,
                            onload: function () {
                                var iframe = this.getIFrameEl();
                            },
                            ondestroy: function (result) {
                            }
                        });
                    } else {
                        var url = "/Form/EditForm/1df45972-b4c2-45ca-b0f3-6d2d4acbba9a/";
                        mini.open({
                            showMaxButton: true,
                            width: "1200",
                            height: "600",
                            url: url,
                            onload: function () {
                                var iframe = this.getIFrameEl();
                            },
                            ondestroy: function (result) {
                            }
                        });
                    }
                });
                option7.series[0].data[0].value = parseFloat(parseFloat(data_str[1]).toFixed(0));
                option7.series[0].data[1].value = parseFloat((parseFloat(data_str[0]) - parseFloat(data_str[1])).toFixed(0));
                myChart7.setOption(option7);
                myChart7.on('click', function (params) {
                    var url = "/Form/EditForm/efb2a646-2cc1-4a4b-bac7-32d930437e49/";
                    mini.open({
                        showMaxButton: true,
                        width: "1200",
                        height: "600",
                        url: url,
                        onload: function () {
                            var iframe = this.getIFrameEl();
                        },
                        ondestroy: function (result) {
                        }
                    });
                });
            }
        });
        //月度投资情况图表
        $.ajax({
            url: "/Progress/ActionProc",
            type: "POST",
            data: {
                ProcName: "P_YLSH_COS_OverallInvestmentBar",
                ProcParamsName: "@EpsProjId,@Type",
                ProcParamsValue: sessiondata.EpsProjId + ",Month",
                Type: "Table"
            },
            cache: false,
            async: false,
            success: function (data) {
                var tmp = mini.decode(data);
                var data_str = [0, 0, 0];
                if (tmp[0] != undefined) {
                    data_str[0] = parseFloat((tmp[0].ThisMonthTarget == null ? 0 : tmp[0].ThisMonthTarget).toFixed(0));
                    data_str[1] = parseFloat((tmp[0].ThisMonthFinished == null ? 0 : tmp[0].ThisMonthFinished).toFixed(0));
                    data_str[2] = parseFloat((tmp[0].Expected == null ? 0 : tmp[0].Expected).toFixed(0));
                }
                option3.series[0].data = data_str;
                myChart3.setOption(option3);
                myChart3.on('click', function (params) {
                    if (params.name == "本月度目标") {
                        var url = "/Form/EditForm/1df45972-b4c2-45ca-b0f3-6d2d4acbba9a/";
                        mini.open({
                            showMaxButton: true,
                            width: "1200",
                            height: "600",
                            url: url,
                            onload: function () {
                                var iframe = this.getIFrameEl();
                            },
                            ondestroy: function (result) {
                            }
                        });
                    }
                    else if (params.name == "本月度已完成") {
                        var url = "/Form/EditForm/5a8a962b-05cc-4a88-93a5-8d1e1f1e1d10/";
                        mini.open({
                            showMaxButton: true,
                            width: "1200",
                            height: "600",
                            url: url,
                            onload: function () {
                                var iframe = this.getIFrameEl();
                            },
                            ondestroy: function (result) {
                            }
                        });
                    } else {
                        var url = "/Form/EditForm/1df45972-b4c2-45ca-b0f3-6d2d4acbba9a/";
                        mini.open({
                            showMaxButton: true,
                            width: "1200",
                            height: "600",
                            url: url,
                            onload: function () {
                                var iframe = this.getIFrameEl();
                            },
                            ondestroy: function (result) {
                            }
                        });
                    }
                });
                option8.series[0].data[0].value = parseFloat(parseFloat(data_str[1]).toFixed(0));
                option8.series[0].data[1].value = parseFloat((parseFloat(data_str[0]) - parseFloat(data_str[1])).toFixed(0));
                myChart8.setOption(option8);
                myChart8.on('click', function (params) {
                    var url = "/Form/EditForm/41286740-c945-494e-870c-a2e92a5e3138/";
                    mini.open({
                        showMaxButton: true,
                        width: "1200",
                        height: "600",
                        url: url,
                        onload: function () {
                            var iframe = this.getIFrameEl();
                        },
                        ondestroy: function (result) {
                        }
                    });
                });
            }
        });*/
        //投资额完成曲线图表
        var data_str0 = [];
        var data_str1 = [];
        var data_str2 = [];
        var data_str3 = [];
        var data_list = [];
        var data_list9 = ["2020-01", "2020-02", "2020-03", "2020-04", "2020-05", "2020-06", "2020-07", "2020-08", "2020-09", "2020-10", "2020-11", "2020-12"];
        var A_data = "";
        var sum_Cost = 0;
        var exec = {};  //对象
        exec.KeyWord = "YLSH_CON_SubContract";
        exec.MethodName = "returnDataList";
        exec.MethodParams = {};
        var params = exec.MethodParams;
        params.EpsId = sessiondata.EpsProjId;
        var txt = mini.encode(exec);
        $.ajax({
            url: "/API/Exec",
            async: false,
            type: "POST",
            data: { jsonData: txt },
            cache: false,
            success: function (text) {
                var tmp = mini.decode(text);
                if (tmp.data.value != "") {
                    data_list9 = tmp.data.value;
                }
            }
        });
        $.ajax({
            url: "/Progress/ActionProc",
            type: "POST",
            data: {
                ProcName: "P_YLSH_COS_InvestmentCompletionCurve",
                ProcParamsName: "@EpsProjId",
                ProcParamsValue: sessiondata.EpsProjId,
                Type: "Table"
            },
            cache: false,
            async: false,
            success: function (data) {
                var tmp = mini.decode(data);
                if (tmp[0] != undefined) {
                    if (tmp[0].A_Date < data_list9[0]) {
                        data_list9[0] = tmp[0].A_Date;
                    }
                    if (tmp[tmp.length - 1].A_Date > data_list9[1]) {
                        data_list9[1] = tmp[tmp.length - 1].A_Date;
                    }
                    data_list9 = getMonthList(data_list9[0], data_list9[1]);
                 //   option4.xAxis[0].data = data_list9;
                    var j = 0;
                    for (var i = 0; i < data_list9.length; i++) {
                        A_data += data_list9[i] + ",";
                        if (j < tmp.length && data_list9[i] == tmp[j].A_Date) {
                            data_str0[i] = parseFloat(parseFloat(tmp[j].InvestmentCompletion == null ? 0 : tmp[j].InvestmentCompletion).toFixed(0));
                            sum_Cost += parseFloat(tmp[j].InvestmentCompletion == null ? 0 : tmp[j].InvestmentCompletion);
                            data_str2[i] = parseFloat(sum_Cost.toFixed(0));
                            j++;
                        } else {
                            data_str0[i] = 0;
                            sum_Cost += 0;
                            data_str2[i] = parseFloat(sum_Cost.toFixed(0));
                        }
                    }
                    /*
                    for (var i = 0; i < tmp.length; i++) {
                        data_list[i] = tmp[i].A_Date;
                        A_data += tmp[i].A_Date + ",";
                        data_str0[i] = parseFloat(parseFloat(tmp[i].InvestmentCompletion == null ? 0 : tmp[i].InvestmentCompletion).toFixed(0));
                        sum_Cost += parseFloat(tmp[i].InvestmentCompletion == null ? 0 : tmp[i].InvestmentCompletion);
                        data_str2[i] = parseFloat(sum_Cost.toFixed(0));
                    }
                    if (data_list.length > 0) {
                        option4.xAxis[0].data = data_list;
                    } else {
                        option4.xAxis[0].data = data_list9;
                    }*/
                }
            }
        });
       /* var exec = {};  //对象
        exec.KeyWord = "YLSH_CON_SubContract";
        exec.MethodName = "chartTZEWCQX";
        exec.MethodParams = {};
        var params = exec.MethodParams;
        params.EpsId = sessiondata.EpsProjId;
        params.A_data = A_data;
        var txt = mini.encode(exec);
        $.ajax({
            url: "/API/Exec",
            async: false,
            type: "POST",
            data: { jsonData: txt },
            cache: false,
            success: function (text) {
                var tmp = mini.decode(text);
                if (A_data.indexOf("null") == -1 && A_data != "" && tmp.data.value[0] != undefined && tmp.data.value[0].length != 0) {
                  //  option4.series[0].data = data_str0;
                    data_str1 = tmp.data.value[0];
                   // option4.series[1].data = data_str1;
                  //  option4.series[2].data = data_str2;
                    data_str3 = tmp.data.value[1];
                  
                    option9.series[0].data[0].value = 50// parseFloat(parseFloat(tmp.data.value[1][tmp.data.value[1].length - 1]).toFixed(0));
                    option9.series[0].data[1].value = 80// parseFloat((parseFloat(data_str2[data_str2.length - 1]) - parseFloat(tmp.data.value[1][tmp.data.value[1].length - 1])).toFixed(0));
                    myChart9.setOption(option9);
                }
               
            }
        });*/
		
    });
    function viewdiv1() {
        if (url_keyvalue1 != "") {
            var url = "/Form/ValidForm/81cdb1bc-0eef-49e8-830c-4fc482e344ca/view/" + url_keyvalue1 + "/"
            // encodeURIComponent(url)
            mini.open({
                showMaxButton: true,
                width: "1200",
                height: "600",
                url: url,
                onload: function () {
                    var iframe = this.getIFrameEl();
                },
                ondestroy: function (result) {
                }
            });
        }
    }
    function viewdiv2() {
        var url = "/Form/ValidForm/131c3ec0-0b36-4b52-b1ea-b2a7c66a6005/view/" + url_keyvalue2 + "/"
        // encodeURIComponent(url)
        mini.open({
            showMaxButton: true,
            width: "1200",
            height: "600",
            url: url,
            onload: function () {
                var iframe = this.getIFrameEl();
            },
            ondestroy: function (result) {
            }
        });
    }
    function viewdiv3() {
        var url = "/Form/EditForm/976d05e3-2327-4725-ae09-3acbd548bc42/"
        // encodeURIComponent(url)
        mini.open({
            showMaxButton: true,
            width: "1200",
            height: "600",
            url: url,
            onload: function () {
                var iframe = this.getIFrameEl();
            },
            ondestroy: function (result) {
            }
        });
    }
    function viewdiv4() {
        var url = "/Form/EditForm/24c3216e-1a34-4955-b65a-07144bcb2e0d/"
        // encodeURIComponent(url)
        mini.open({
            showMaxButton: true,
            width: "1200",
            height: "600",
            url: url,
            onload: function () {
                var iframe = this.getIFrameEl();
            },
            ondestroy: function (result) {
            }
        });
    }
    function format_number(n) {
        var b = parseInt(n).toString();
        var len = b.length;
        if (len <= 3) { return b; }
        var r = len % 3;
        return r > 0 ? b.slice(0, r) + "," + b.slice(r, len).match(/\d{3}/g).join(",") : b.slice(r, len).match(/\d{3}/g).join(",");
    }
    function getMonthList(e, f) {
        var startArr = e.split("-");
        var startYear = parseInt(startArr[0]);
        var startMonth = parseInt(startArr[1]);
        var curArr = f.split("-");
        var curYear = parseInt(curArr[0]);
        var curMonth = parseInt(curArr[1]);
        var list = new Array();
        var len = 0;
        for (var i = startYear; i <= curYear; i++) {
            for (var j = 1; j <= 12; j++) {
                if (((i == startYear && j < startMonth) || (i == curYear && j > curMonth))) {
                } else {
                    var monthStr = "";
                    if (j < 10) {
                        monthStr = "0" + j;
                    } else {
                        monthStr = j;
                    }
                    var yearMonth = i + "-" + monthStr;
                    list[len++] = yearMonth;
                }
            }
        }
        return list;
    }

    //计算最大值
    function calMax(arr, bl) {
        let max = 0;
        arr.forEach((el) => {
            el.forEach((el1) => {
                if (!(el1 === undefined || el1 === '')) {
                    if (max < el1) {
                        max = el1;
                    }
                }
            })
        })
        let maxint = Math.ceil(max / 9.5 / bl / 6);//不让最高的值超过最上面的刻度
        let maxval = maxint * 10 * bl * 6;//让显示的刻度是整数
        return maxval;
    }
	
	
	function xmid(){
	  var p = { KeyWord: "ProjectPlan", select: "proj_plan_guid,plan_name,data_date", sort: "proj_plan_id", size: "1" };
                p.swhere = "proj_guid='" + sessiondata.EpsProjId + "' and parent_plan_id=0";
                FormFuns.GridPageLoad(p, function (o) {
                    var data = mini.decode(o.data.value);
                    if (data.length > 0) {
                        currentplan = data[0].proj_plan_guid;
                        plan_datadate = data[0].data_date;
                     //   SetBtnEditValue("txtPlanName", data[0].plan_name);
                        LoadData();
                    }
                })
	
	}
	
	
	
        function LoadData() {
            if (!currentplan) {
                Power.ui.warning("请先选择计划");
                return;
            }

            //获取某年某月的天数
            var getDays = function (y, m) {
                return new Date(y, m, 0).getDate();
            }
            var fnprocess = function (list) {
                //定义表格数据
                var cols = [{ field: "group", header: "", width: "40px" }, { field: "title", header: "", width: "60px" }];
                var actcur_grid = { "group": "当期", "title": "赢得值" }, actsum_grid = { "group": "累计", "title": "赢得值" };
                var plncur_grid = { "group": "当期", "title": "预算" }, plnsum_grid = { "group": "累计", "title": "预算" };
                var dffcur_grid = { "group": "当期", "title": "差值" }, dffsum_grid = { "group": "累计", "title": "差值" };
                var rows = [plncur_grid, actcur_grid, dffcur_grid, plnsum_grid, actsum_grid, dffsum_grid];
                var grpcol;

                //定义曲线柱形图数据
                var xaxis = { type: 'category', data: [] };
                var actcur_chart = { "name": "赢得值", type: 'bar', yAxisIndex: 1, data: [] };
                var actsum_chart = { "name": "累计赢得值", type: 'line', data: [] };
                var plncur_chart = { "name": "预算", type: 'bar', yAxisIndex: 1, data: [] };
                var plnsum_chart = { "name": "累计预算", type: 'line', data: [] };
                var curmax = 0, summax = 0;

                //结算周期是否是自然月,此条件用于判断是否需要按照结算日来对月进行拆分
                var IsNatureMonth = AccountingPeriod && parseToNumber(AccountingPeriod.IsNatureMonth) === 1;
                //自定义列
                var colsheader = {};
                //待处理的曲线柱形图数据
                var echartData = {};
                //处理数据
                $.each(list, function () {
                    var item = this;
                    var yy = mini.formatDate(item.enddate, "yyyy");
                    var mm = mini.formatDate(item.enddate, "MM");
                    var dd = mini.formatDate(item.enddate, "dd");
                    var oldymd = yy + "-" + mm + "-" + dd;//预存数据原来的年月日

                    //如果有结算周期并且结算周期不是按照自然月
                    if (!IsNatureMonth) {
                        var startDay = parseToNumber(AccountingPeriod.StartDay);//结算周期开始日 如25
                        var endDay = parseToNumber(AccountingPeriod.EndDay);//结算周期结束日  如24
                        var year = parseToNumber(yy);
                        var month = parseToNumber(mm);
                        var day = parseToNumber(dd);
                        if (day > endDay) {
                            if (month == 12) {
                                year++;
                                month = 1;
                            } else {
                                month++;
                            }
                            yy = "" + year;
                            mm = month > 9 ? ("" + month) : ("0" + month);
                            dd = getDays(year, month);
                        }
                    }
                    //年月  月日  年月日 定义
                    var ym = yy + "-" + mm;
                    var md = mm + "-" + dd;
                    var ymd = yy + "-" + mm + "-" + dd;
                    //定义列的时间字段
                    var field = type == "year" ? yy : type == "month" ? ym : type == "week" ? ymd : ymd;

                    //表格数据
                    //根据类型动态生成列
                    switch (type) {
                        case "year":
                            if (!colsheader[yy]) {
                                colsheader[yy] = {};
                                grpcol = { field: yy, headerAlign: "center", header: yy, align: "right", width: "60px" };
                                cols.push(grpcol);
                            }
                            break;
                        case "month":
                            if (!colsheader[yy]) {
                                colsheader[yy] = {};
                                grpcol = { header: yy, headerAlign: "center", columns: [] };
                                cols.push(grpcol);
                                colsheader[yy][ym] = {};
                                grpcol.columns.push({ field: ym, headerAlign: "center", header: mm, align: "right", width: "100px" });
                            } else if (!colsheader[yy][ym]) {
                                colsheader[yy][ym] = {};
                                grpcol.columns.push({ field: ym, headerAlign: "center", header: mm, align: "right", width: "100px" });
                            }
                            break;
                        case "week":
                        case "day":
                            if (!colsheader[yy]) {
                                colsheader[yy] = {};
                                grpcol = { header: yy, headerAlign: "center", columns: [] };
                                cols.push(grpcol);
                                colsheader[yy][ym] = {};
                                grpcol.columns.push({ header: mm, headerAlign: "center", columns: [] });
                                colsheader[yy][ym][ymd] = {};
                                grpcol.columns[0].columns.push({ field: ymd, headerAlign: "center", header: oldymd, align: "right", width: "100px" });
                            } else if (!colsheader[yy][ym]) {
                                colsheader[yy][ym] = {};
                                grpcol.columns.push({ header: mm, headerAlign: "center", columns: [] });
                                colsheader[yy][ym][ymd] = {};
                                var len = grpcol.columns.length - 1;
                                grpcol.columns[len].columns.push({ field: ymd, headerAlign: "center", header: oldymd, align: "right", width: "100px" });
                            } else if (!colsheader[yy][ym][ymd]) {
                                colsheader[yy][ym][ymd] = {};
                                var len = grpcol.columns.length - 1;
                                grpcol.columns[len].columns.push({ field: ymd, headerAlign: "center", header: oldymd, align: "right", width: "100px" });
                            }
                            break;
                        default:
                            break;
                    }
                    //按照数据日期截断
                    if (plan_datadate.format("yyyy-MM-dd") >= item.enddate.format("yyyy-MM-dd")) {
                        item.actcurpct = Math.round(item.actcurpct / 10000 * 100) / 100;
                        item.actsumpct = Math.round(item.actsumpct / 10000 * 100) / 100;
                    } else {
                        item.actcurpct = 0;
                        item.actsumpct = 0;
                    }
                    //将数据处理成以万元为单位
                    item.plncurpct = Math.round(item.plncurpct / 10000 * 100) / 100;
                    item.plnsumpct = Math.round(item.plnsumpct / 10000 * 100) / 100;
                    item.dffcurpct = Math.round(item.dffcurpct / 10000 * 100) / 100;
                    item.dffsumpct = Math.round(item.dffsumpct / 10000 * 100) / 100;
                    //表格数据
                    actcur_grid[field] = (actcur_grid[field] || 0) + item.actcurpct;
                    actsum_grid[field] = item.actsumpct;
                    plncur_grid[field] = (plncur_grid[field] || 0) + item.plncurpct;
                    plnsum_grid[field] = item.plnsumpct;
                    dffcur_grid[field] = (dffcur_grid[field] || 0) + item.dffcurpct;
                    dffsum_grid[field] = item.dffsumpct;

                    //曲线柱形图数据
                    if (!echartData[field]) {
                        echartData[field] = {
                            actcur: 0,
                            actsum: 0,
                            plncur: 0,
                            plnsum: 0
                        }
                    }
                    echartData[field]["actcur"] += item.actcurpct;
                    //按照数据日期截断
                    if (plan_datadate.format("yyyy-MM-dd") >= item.enddate.format("yyyy-MM-dd")) {
                        echartData[field]["actsum"] = item.actsumpct;
                    } else {
                        delete echartData[field]["actsum"];
                    }
                    echartData[field]["plncur"] += item.plncurpct;
                    echartData[field]["plnsum"] = item.plnsumpct;
                });

                //将结果保留2位小数
                for (var k in actcur_grid) {
                    actcur_grid[k] = ToFixed(actcur_grid[k]);
                    actsum_grid[k] = ToFixed(actsum_grid[k]);
                    plncur_grid[k] = ToFixed(plncur_grid[k]);
                    plnsum_grid[k] = ToFixed(plnsum_grid[k]);
                    dffcur_grid[k] = ToFixed(dffcur_grid[k]);
                    dffsum_grid[k] = ToFixed(dffsum_grid[k]);
                }

                //加属性方法
                var addprotypeFuns = function (o, p) {
                    for (var k in p) {
                        if (!o[k]) o[k] = p[k];
                    }
                }
                addprotypeFuns(actcur_grid, { "group": "当期", "title": "赢得值" });
                addprotypeFuns(actsum_grid, { "group": "累计", "title": "赢得值" });

                addprotypeFuns(plncur_grid, { "group": "当期", "title": "预算" });
                addprotypeFuns(plnsum_grid, { "group": "累计", "title": "预算" });

                addprotypeFuns(dffcur_grid, { "group": "当期", "title": "差值" });
                addprotypeFuns(dffsum_grid, { "group": "累计", "title": "差值" });

                //处理曲线柱形图数据
                for (var k in echartData) {
                    xaxis.data.push(k);
                    actcur_chart.data.push(ToFixed(echartData[k]["actcur"]));//当期实际
                    //按照数据日期截断
                    if (echartData[k]["actsum"] != undefined) {
                        actsum_chart.data.push(ToFixed(echartData[k]["actsum"]));//累计实际
                    }
                    plncur_chart.data.push(ToFixed(echartData[k]["plncur"]));//当期计划
                    plnsum_chart.data.push(ToFixed(echartData[k]["plnsum"]));//累计计划
                    if (echartData[k]["actcur"] > curmax) curmax = ToFixed(echartData[k]["actcur"]);
                    if (echartData[k]["plncur"] > curmax) curmax = ToFixed(echartData[k]["plncur"]);
                    if (echartData[k]["plnsum"] > summax) summax = ToFixed(echartData[k]["plnsum"]);
                }

                //赋值表格
             /*   var grid = mini.get("WBSEVM");
                grid.set({ columns: cols });
                grid.setData(rows);
                var marges = [{ rowIndex: 0, columnIndex: 0, rowSpan: 3, colSpan: 1 }, { rowIndex: 3, columnIndex: 0, rowSpan: 3, colSpan: 1 }];
                grid.mergeCells(marges);*/

                //加载曲线柱形图
                curmax = Math.ceil(curmax * 1.1);
                var opt = {};
                opt.tooltip = { trigger: 'axis' };
                opt.toolbox = { show: false };
                opt.legend = { data: ["预算", "赢得值", "累计预算", "累计赢得值"] };
                opt.xAxis = [xaxis];
                opt.yAxis = [{ type: 'value', name: '累计(万元)', min: 0, max: summax }, { type: 'value', name: '当期(万元)', min: 0, max: curmax }];
                opt.series = [plncur_chart, actcur_chart, plnsum_chart, actsum_chart];
                InitEChart("charthere", opt);
            }

            $.ajax({
                url: "/Plan/GetWBSBCWP",
                data: { plan_guid: currentplan, task_guid:   currentplan },
                type: "POST",
                success: function (text) {
                    var o = mini.decode(text);
                    if (o.success) {
                        fnprocess(o.list);
                    }
                }
            });
        }
		
		      //将数据保留n为小数点 默认2位 并返回number类型
        var ToFixed = function (v, n) {
            n = n ? n : 2;
            return parseToNumber(parseToNumber(v).toFixed(n));
        }

        //转number
        var parseToNumber = function (v) {
            var n = parseFloat(v);
            return isNaN(n) ? 0 : n;
        }


        //渲染图表
        function InitEChart(chartid, option) {
            require.config({
                paths: {
                    echarts: '/Scripts/plugins/echarts/'
                }
            });
            require([
                'echarts',
                'echarts/theme/default',
                'echarts/chart/line',   // 按需加载所需图表，如需动态类型切换功能，别忘了同时加载相应图表
                'echarts/chart/bar'
            ], function (ec, theme) {
                mychart = ec.init(document.getElementById(chartid), theme);
                mychart.setOption(option);
            })
        }   GetAccountingPeriod();
	  xmid()
</script>
